{% extends "layout/command.md.jinja" %}
{% block command %}{{ command }}{% endblock %}
{% block content %}
What is it for?
---
Using `git init` will allow you to manipulate the specified directory with `git`. 


Example 1: No options, default values.
---
```
{%- for item in example['1'] %}
{{ item }}
{%- endfor %}
```

Here we first create a directory called `project`. This will be our new git repository. We make `project` the current directory by running the `cd` command. Next we create an empty file called `Makefile`. 

Adding the file to git results in an error. Checking the git status also results in an error. The important bit is `not a git repository`. This tells us that you can run `add` and `status` only in a git repository.

The command `git init` makes it a git repository. Since we did not specify any directory or any options, it will process the current directory.

We can then run `git status` and `git add` and it will behave as expected.

Example 2: --template \<template-directory>
---
```
{%- for item in example['2'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?

- `git init` without the `--template` option will use `/usr/share/git-core/templates` as the template directory.
- `git init` with the `--template` option on an empty template directory would still create:
  - HEAD file
  - config file
  - objects directory
  - refs directory

What if the template directory is not empty?

Example 2a:  --template \<template-directory>
---
```
{%- for item in example['2a'] %}
{{ item }}
{%- endfor %}
```
What does this tell us?

- If a files does not conflict with the git structure, it will be copied over.

What if the template directory contains a file called `config` with garbage content?

Example 2b:  --template \<template-directory>
---
```
{%- for item in example['2b'] %}
{{ item }}
{%- endfor %}
```
What does this tell us?

- If it the template directory contains a file called `config`, it has to be in the right format.
- The `.git` directory will still be created but it will not be a valid repository.
- What would be a valid content? [Here](https://git-scm.com/docs/git-config/{{ version }}#_variables) are some of the values that can be used.
- How about we give that a try with `blame.showEmail` ?

Example 2c:  --template \<template-directory>
---
```
{%- for item in example['2c'] %}
{{ item }}
{%- endfor %}
```
What does this tell us?
- The proper format will works.

What if we use the proper format but with some made up content?

Example 2d:  --template \<template-directory>
---
```
{%- for item in example['2d'] %}
{{ item }}
{%- endfor %}
```
What does this tell us?
- You can configure any values as long as they are in the right format? 

- Can you overwrite existing ones?

Example 2e:  --template \<template-directory>
---
```
{%- for item in example['2e'] %}
{{ item }}
{%- endfor %}
```
What does this tell us?
- It looks like it is not possible to overwrite existing values.

- What if you add a little padding?

Example 2f:  --template \<template-directory>
---
```
{%- for item in example['2f'] %}
{{ item }}
{%- endfor %}
```
What does this tell us?
- Even with padding, the default value cannot be changed using `--template`

Example 2g:  --template \<template-directory>
---
```
{%- for item in example['2g'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?
- If you specify `HEAD` file, it will display `Reinitialized existing Git repository` instead of `Initialized empty Git repository`.

- What if `HEAD` was not in the correct format?

Example 2h:  --template \<template-directory>
---
```
{%- for item in example['2h'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?
- The directory structure will be created but it will not be a proper git repository.

- What you run `git init` on an existing git repository?

Example 2i:  --template \<template-directory>
---
```
{%- for item in example['2i'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?
- `git init --template` on an existing git repository
   - will copy over new files in the template directory.
   - will not overwrite/merge/delete any file that already exist.

Example 3:  --bare
---
```
{%- for item in example['3'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?
- the bare repository behaves differently.

Example 3a:  --bare
---
```
{%- for item in example['3a'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?
- We can push-to/clone-from/pull-from the bare repository.

Can we clone from .git?

Example 3b: --bare
---
```
{%- for item in example['3b'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?
- We can push-to/clone-from/pull-from the non-bare repository too.

Example 4: --shared
---
```
{%- for item in example['4'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?
- If `--shared` is ommitted, it is the same as `--shared=umask` or `--shared=false`. It is not shared and the `.git` direcrory would be created as the `umask` value.
- If `--shared` is specified, but no value is given, it is the same as `--shared=group` or `--shared=true`. Users from the same group have access to the `.git` directory.
- If `--shared=all` or `--shared=world` or `--shared=everybody`, it is the same as  `--shared=group` + readable by others.
- If `--shared=0xxx`, the repository will be created with the octal permission. The option `--shared=0606` will create a `.git` direcrory with the permission `drwx--Srwx`.

Example 5: -q
---
```
{%- for item in example['5'] %}
{{ item }}
{%- endfor %}
```

What does this tell us?
- Adding `-q` makes it less verbose.


{% endblock %}